cat > leaflet.curve.min.js << 'EOF'
/*
 * Leaflet.curve - A plugin for Leaflet to draw curved lines
 */
L.Curve = L.Path.extend({
  options: {
    color: 'red',
    weight: 5,
    opacity: 1,
    dashArray: null,
    fillOpacity: 0.2,
    clickable: true
  },

  initialize: function (path, options) {
    L.setOptions(this, options);
    this._setPath(path);
  },

  _setPath: function (path) {
    this._path = path;
  },

  _project: function () {
    this._rings = [];
    this._projectLatlngs(this._path, this._rings, this._pxBounds);
  },

  _projectLatlngs: function (latlngs, result, projectedBounds) {
    var flat = latlngs[0] instanceof L.LatLng,
        len = latlngs.length,
        i, ring;

    if (flat) {
      ring = [];
      for (i = 0; i < len; i++) {
        ring[i] = this._map.latLngToLayerPoint(latlngs[i]);
        this._pxBounds.extend(ring[i]);
      }
      result.push(ring);
    } else {
      for (i = 0; i < len; i++) {
        this._projectLatlngs(latlngs[i], result, projectedBounds);
      }
    }
  },

  getPathString: function () {
    var path = '';
    for (var i = 0; i < this._path.length; i++) {
      if (typeof this._path[i] === 'string') {
        path += this._path[i];
      } else if (this._path[i] instanceof Array) {
        path += this._path[i][0] + ',' + this._path[i][1] + ' ';
      }
    }
    return path;
  },

  _updatePath: function () {
    if (!this._map) { return; }
    this._clipPoints();
    this._simplifyPoints();
    this._updatePoly();
  },

  _updatePoly: function () {
    this._setPath(this.getPathString());
  }
});

L.curve = function (path, options) {
  return new L.Curve(path, options);
};
EOF